/*
 * University of Illinois Open Source License
 * Copyright 2012-2014 Roberts Group,
 * All rights reserved.
 *
 * Developed by: Roberts Group
 * 			     Johns Hopkins University
 * 			     http://biophysics.jhu.edu/roberts/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the Software), to deal with
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to
 * do so, subject to the following conditions:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimers.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimers in the documentation
 * and/or other materials provided with the distribution.
 *
 * - Neither the names of the Roberts Group, Johns Hopkins University,
 * nor the names of its contributors may be used to endorse or
 * promote products derived from this Software without specific prior written
 * permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS WITH THE SOFTWARE.
 *
 * Author(s): Elijah Roberts
 */

package lm.io;

import "robertslab/pbuf/NDArray.proto";

message BoundaryConditions {

    enum BoundaryConditionsType {
        REFLECTING              = 0;
        ABSORBING               = 1;
        PERIODIC                = 2;
        FIXED_CONCENTRATION     = 3;        // Fixed concentration at the boundary.
        FIXED_GRADIENT          = 4;        // Fixed and unique concentration at each boundary site.
    }    
    
    optional BoundaryConditionsType global              = 1;
    optional bool axis_specific_boundaries              = 2 [default=false];
    optional BoundaryConditionsType x_plus              = 3;
    optional BoundaryConditionsType x_minus             = 4;
    optional BoundaryConditionsType y_plus              = 5;
    optional BoundaryConditionsType y_minus             = 6;
    optional BoundaryConditionsType z_plus              = 7;
    optional BoundaryConditionsType z_minus             = 8;
    
    // Parameters for FIXED_CONCENTRATION and FIXED_GRADIENT.
    optional int32 boundary_species                     = 10;
    optional int32 boundary_site                        = 11;
    
    // Parameters for FIXED_CONCENTRATION.
    optional double boundary_concentration              = 21;
    
    // Parameters for FIXED_GRADIENT.
    optional robertslab.pbuf.NDArray boundary_gradient  = 31;   //3D; 1=x_size+2,2=y_size+2,3=z_size+2; type=double
}